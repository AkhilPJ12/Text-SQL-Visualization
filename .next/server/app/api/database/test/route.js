/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/database/test/route";
exports.ids = ["app/api/database/test/route"];
exports.modules = {

/***/ "(rsc)/./app/api/database/test/route.ts":
/*!****************************************!*\
  !*** ./app/api/database/test/route.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./lib/database.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_database__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_database__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst dynamic = \"force-dynamic\";\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const { type, host, port, database, username, password, filePath, serviceName, serverName } = body;\n        if (!type) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database type is required\"\n            }, {\n                status: 400\n            });\n        }\n        const config = {\n            type,\n            host,\n            port,\n            database,\n            username,\n            password,\n            filePath,\n            serviceName,\n            serverName\n        };\n        const dbConnection = new _lib_database__WEBPACK_IMPORTED_MODULE_1__.DatabaseConnection(config);\n        // Test connection first\n        const connectionTest = await dbConnection.testConnection();\n        if (!connectionTest.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                connectionStatus: 'failed',\n                error: connectionTest.error,\n                tables: [],\n                totalTables: 0\n            });\n        }\n        // If connection successful, get metadata\n        const metadata = await dbConnection.getMetadata();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            ...metadata\n        });\n    } catch (error) {\n        console.error(\"Database test error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            connectionStatus: 'failed',\n            error: error instanceof Error ? error.message : \"Unknown error occurred\",\n            tables: [],\n            totalTables: 0\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2RhdGFiYXNlL3Rlc3Qvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwQztBQUN5QjtBQUU1RCxNQUFNRSxVQUFVLGdCQUFlO0FBRS9CLGVBQWVDLEtBQUtDLEdBQVk7SUFDckMsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsSUFBSUUsSUFBSTtRQUMzQixNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUUsR0FBR1Y7UUFFOUYsSUFBSSxDQUFDRSxNQUFNO1lBQ1QsT0FBT1AscURBQVlBLENBQUNNLElBQUksQ0FBQztnQkFBRVUsT0FBTztZQUE0QixHQUFHO2dCQUFFQyxRQUFRO1lBQUk7UUFDakY7UUFFQSxNQUFNQyxTQUF5QjtZQUM3Qlg7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtRQUVBLE1BQU1JLGVBQWUsSUFBSWxCLDZEQUFrQkEsQ0FBQ2lCO1FBRTVDLHdCQUF3QjtRQUN4QixNQUFNRSxpQkFBaUIsTUFBTUQsYUFBYUUsY0FBYztRQUN4RCxJQUFJLENBQUNELGVBQWVFLE9BQU8sRUFBRTtZQUMzQixPQUFPdEIscURBQVlBLENBQUNNLElBQUksQ0FBQztnQkFDdkJnQixTQUFTO2dCQUNUQyxrQkFBa0I7Z0JBQ2xCUCxPQUFPSSxlQUFlSixLQUFLO2dCQUMzQlEsUUFBUSxFQUFFO2dCQUNWQyxhQUFhO1lBQ2Y7UUFDRjtRQUVBLHlDQUF5QztRQUN6QyxNQUFNQyxXQUFXLE1BQU1QLGFBQWFRLFdBQVc7UUFFL0MsT0FBTzNCLHFEQUFZQSxDQUFDTSxJQUFJLENBQUM7WUFDdkJnQixTQUFTO1lBQ1QsR0FBR0ksUUFBUTtRQUNiO0lBRUYsRUFBRSxPQUFPVixPQUFPO1FBQ2RZLFFBQVFaLEtBQUssQ0FBQyx3QkFBd0JBO1FBQ3RDLE9BQU9oQixxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtZQUNFZ0IsU0FBUztZQUNUQyxrQkFBa0I7WUFDbEJQLE9BQU9BLGlCQUFpQmEsUUFBUWIsTUFBTWMsT0FBTyxHQUFHO1lBQ2hETixRQUFRLEVBQUU7WUFDVkMsYUFBYTtRQUNmLEdBQ0E7WUFBRVIsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha2hpbC9EZXNrdG9wL1Byb2plY3RzL1RleHQtU1FMLVZpc3VhbGl6YXRpb24vYXBwL2FwaS9kYXRhYmFzZS90ZXN0L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiXG5pbXBvcnQgeyBEYXRhYmFzZUNvbm5lY3Rpb24sIERhdGFiYXNlQ29uZmlnIH0gZnJvbSBcIkAvbGliL2RhdGFiYXNlXCJcblxuZXhwb3J0IGNvbnN0IGR5bmFtaWMgPSBcImZvcmNlLWR5bmFtaWNcIlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXE6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxLmpzb24oKVxuICAgIGNvbnN0IHsgdHlwZSwgaG9zdCwgcG9ydCwgZGF0YWJhc2UsIHVzZXJuYW1lLCBwYXNzd29yZCwgZmlsZVBhdGgsIHNlcnZpY2VOYW1lLCBzZXJ2ZXJOYW1lIH0gPSBib2R5XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiBcIkRhdGFiYXNlIHR5cGUgaXMgcmVxdWlyZWRcIiB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnOiBEYXRhYmFzZUNvbmZpZyA9IHtcbiAgICAgIHR5cGUsXG4gICAgICBob3N0LFxuICAgICAgcG9ydCxcbiAgICAgIGRhdGFiYXNlLFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGZpbGVQYXRoLFxuICAgICAgc2VydmljZU5hbWUsXG4gICAgICBzZXJ2ZXJOYW1lLFxuICAgIH1cblxuICAgIGNvbnN0IGRiQ29ubmVjdGlvbiA9IG5ldyBEYXRhYmFzZUNvbm5lY3Rpb24oY29uZmlnKVxuXG4gICAgLy8gVGVzdCBjb25uZWN0aW9uIGZpcnN0XG4gICAgY29uc3QgY29ubmVjdGlvblRlc3QgPSBhd2FpdCBkYkNvbm5lY3Rpb24udGVzdENvbm5lY3Rpb24oKVxuICAgIGlmICghY29ubmVjdGlvblRlc3Quc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGNvbm5lY3Rpb25TdGF0dXM6ICdmYWlsZWQnLFxuICAgICAgICBlcnJvcjogY29ubmVjdGlvblRlc3QuZXJyb3IsXG4gICAgICAgIHRhYmxlczogW10sXG4gICAgICAgIHRvdGFsVGFibGVzOiAwXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIElmIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCwgZ2V0IG1ldGFkYXRhXG4gICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBkYkNvbm5lY3Rpb24uZ2V0TWV0YWRhdGEoKVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgLi4ubWV0YWRhdGFcbiAgICB9KVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkRhdGFiYXNlIHRlc3QgZXJyb3I6XCIsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgY29ubmVjdGlvblN0YXR1czogJ2ZhaWxlZCcsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvciBvY2N1cnJlZFwiLFxuICAgICAgICB0YWJsZXM6IFtdLFxuICAgICAgICB0b3RhbFRhYmxlczogMFxuICAgICAgfSwgXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJEYXRhYmFzZUNvbm5lY3Rpb24iLCJkeW5hbWljIiwiUE9TVCIsInJlcSIsImJvZHkiLCJqc29uIiwidHlwZSIsImhvc3QiLCJwb3J0IiwiZGF0YWJhc2UiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZmlsZVBhdGgiLCJzZXJ2aWNlTmFtZSIsInNlcnZlck5hbWUiLCJlcnJvciIsInN0YXR1cyIsImNvbmZpZyIsImRiQ29ubmVjdGlvbiIsImNvbm5lY3Rpb25UZXN0IiwidGVzdENvbm5lY3Rpb24iLCJzdWNjZXNzIiwiY29ubmVjdGlvblN0YXR1cyIsInRhYmxlcyIsInRvdGFsVGFibGVzIiwibWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImNvbnNvbGUiLCJFcnJvciIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/database/test/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseConnection: () => (/* binding */ DatabaseConnection)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nclass DatabaseConnection {\n    constructor(config){\n        this.config = config;\n    }\n    async testConnection() {\n        try {\n            switch(this.config.type){\n                case 'postgresql':\n                    return await this.testPostgreSQL();\n                case 'mysql':\n                    return await this.testMySQL();\n                case 'sqlite':\n                    return await this.testSQLite();\n                case 'sqlserver':\n                    return await this.testSQLServer();\n                case 'oracle':\n                    return await this.testOracle();\n                default:\n                    return {\n                        success: false,\n                        error: 'Unsupported database type'\n                    };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async getMetadata() {\n        try {\n            switch(this.config.type){\n                case 'postgresql':\n                    return await this.getPostgreSQLMetadata();\n                case 'mysql':\n                    return await this.getMySQLMetadata();\n                case 'sqlite':\n                    return await this.getSQLiteMetadata();\n                case 'sqlserver':\n                    return await this.getSQLServerMetadata();\n                case 'oracle':\n                    return await this.getOracleMetadata();\n                default:\n                    return {\n                        tables: [],\n                        totalTables: 0,\n                        connectionStatus: 'failed',\n                        error: 'Unsupported database type'\n                    };\n            }\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async testPostgreSQL() {\n        const client = new pg__WEBPACK_IMPORTED_MODULE_0__.Client({\n            host: this.config.host,\n            port: parseInt(this.config.port || '5432'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password\n        });\n        try {\n            await client.connect();\n            await client.query('SELECT 1');\n            await client.end();\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testMySQL() {\n        try {\n            const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_1__.createConnection({\n                host: this.config.host,\n                port: parseInt(this.config.port || '3306'),\n                database: this.config.database,\n                user: this.config.username,\n                password: this.config.password\n            });\n            await connection.query('SELECT 1');\n            await connection.end();\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testSQLite() {\n        try {\n            const db = new (sqlite3__WEBPACK_IMPORTED_MODULE_2___default().Database)(this.config.filePath || '');\n            const query = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.get).bind(db);\n            await query('SELECT 1');\n            db.close();\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testSQLServer() {\n        // For SQL Server, we'll use a simple connection test\n        // In production, you'd want to use mssql package\n        try {\n            // This is a placeholder - you'll need to implement actual SQL Server connection\n            return {\n                success: false,\n                error: 'SQL Server connection not yet implemented'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testOracle() {\n        // For Oracle, we'll use a simple connection test\n        // In production, you'd want to use oracledb package\n        try {\n            // This is a placeholder - you'll need to implement actual Oracle connection\n            return {\n                success: false,\n                error: 'Oracle connection not yet implemented'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async getPostgreSQLMetadata() {\n        console.log('PostgreSQL: Connecting with config:', {\n            host: this.config.host,\n            port: this.config.port || '5432',\n            database: this.config.database,\n            user: this.config.username\n        });\n        const client = new pg__WEBPACK_IMPORTED_MODULE_0__.Client({\n            host: this.config.host,\n            port: parseInt(this.config.port || '5432'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password\n        });\n        try {\n            await client.connect();\n            console.log('PostgreSQL: Connected successfully, fetching metadata...');\n            // Debug: Check what database and user we're actually connected to\n            try {\n                const contextResult = await client.query(`\n          SELECT current_user, current_database(), current_schema()\n        `);\n                console.log('PostgreSQL: Connection context:', contextResult.rows[0]);\n            } catch (contextError) {\n                console.log('PostgreSQL: Could not get connection context:', contextError);\n            }\n            // Try multiple approaches to find tables\n            let tablesResult;\n            // Approach 1: Try pg_tables with more debugging\n            try {\n                console.log('PostgreSQL: Trying pg_tables query...');\n                const pgTablesTest = await client.query(`\n          SELECT schemaname, tablename \n          FROM pg_tables \n          ORDER BY schemaname, tablename\n        `);\n                console.log('PostgreSQL: pg_tables raw result:', pgTablesTest.rows);\n                // Look for user tables in ANY schema (not just public)\n                tablesResult = await client.query(`\n          SELECT schemaname, tablename \n          FROM pg_tables \n          WHERE schemaname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n          ORDER BY schemaname, tablename\n        `);\n                console.log('PostgreSQL: Found', tablesResult.rows.length, 'user tables via pg_tables (all schemas)');\n                // If still no tables, try to find what schemas exist\n                if (tablesResult.rows.length === 0) {\n                    const schemasResult = await client.query(`\n            SELECT nspname as schema_name\n            FROM pg_namespace\n            WHERE nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n            ORDER BY nspname\n          `);\n                    console.log('PostgreSQL: Available schemas:', schemasResult.rows);\n                    // Try to find your specific tables directly\n                    const specificTablesResult = await client.query(`\n            SELECT schemaname, tablename \n            FROM pg_tables \n            WHERE tablename IN ('sales_data', 'user_prompts')\n            ORDER BY schemaname, tablename\n          `);\n                    console.log('PostgreSQL: Looking for specific tables (sales_data, user_prompts):', specificTablesResult.rows);\n                    // Try a direct query to see if we can access the tables\n                    try {\n                        const directQueryResult = await client.query(`\n              SELECT COUNT(*) as table_count FROM pg_tables \n              WHERE schemaname = 'public' \n              AND tablename IN ('sales_data', 'user_prompts')\n            `);\n                        console.log('PostgreSQL: Direct table count query result:', directQueryResult.rows[0]);\n                    } catch (directError) {\n                        console.log('PostgreSQL: Direct query failed:', directError);\n                    }\n                }\n            } catch (pgError) {\n                console.log('PostgreSQL: pg_tables failed:', pgError);\n            }\n            // Approach 2: If pg_tables didn't work or found 0 tables, try information_schema\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying information_schema query...');\n                    tablesResult = await client.query(`\n            SELECT table_schema, table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_type = 'BASE TABLE'\n            ORDER BY table_name\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables via information_schema');\n                } catch (infoError) {\n                    console.log('PostgreSQL: information_schema failed:', infoError);\n                }\n            }\n            // Approach 3: Try a direct catalog query\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying direct catalog query...');\n                    tablesResult = await client.query(`\n            SELECT n.nspname as schema_name, c.relname as table_name\n            FROM pg_class c\n            JOIN pg_namespace n ON c.relnamespace = n.oid\n            WHERE c.relkind = 'r'\n            AND n.nspname = 'public'\n            ORDER BY c.relname\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables via direct catalog query');\n                } catch (catError) {\n                    console.log('PostgreSQL: Direct catalog query failed:', catError);\n                }\n            }\n            // Approach 4: Try to find ANY tables in ANY schema\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying to find tables in ANY schema...');\n                    tablesResult = await client.query(`\n            SELECT n.nspname as schema_name, c.relname as table_name\n            FROM pg_class c\n            JOIN pg_namespace n ON c.relnamespace = n.oid\n            WHERE c.relkind = 'r'\n            AND n.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n            ORDER BY n.nspname, c.relname\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables in ANY schema');\n                } catch (anyError) {\n                    console.log('PostgreSQL: ANY schema query failed:', anyError);\n                }\n            }\n            if (!tablesResult || !tablesResult.rows || tablesResult.rows.length === 0) {\n                console.log('PostgreSQL: No tables found in any schema');\n                await client.end();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult.rows){\n                const tableName = tableRow.tablename || tableRow.table_name;\n                const schemaName = tableRow.schemaname || tableRow.table_schema || 'public';\n                console.log('PostgreSQL: Processing table:', tableName, 'in schema:', schemaName);\n                // Get columns for this table\n                let columnsResult;\n                try {\n                    columnsResult = await client.query(`\n            SELECT \n              column_name,\n              data_type,\n              is_nullable,\n              column_default,\n              ordinal_position\n            FROM information_schema.columns \n            WHERE table_schema = $1 \n            AND table_name = $2\n            ORDER BY ordinal_position\n          `, [\n                        schemaName,\n                        tableName\n                    ]);\n                } catch (colError) {\n                    console.log('PostgreSQL: information_schema.columns failed for', tableName, 'trying pg_attribute...');\n                    // Fallback to pg_attribute\n                    columnsResult = await client.query(`\n            SELECT \n              attname as column_name,\n              format_type(atttypid, atttypmod) as data_type,\n              attnotnull as is_not_null,\n              attnum as ordinal_position\n            FROM pg_attribute \n            WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = $1 AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2))\n            AND attnum > 0 \n            AND NOT attisdropped\n            ORDER BY attnum\n          `, [\n                        tableName,\n                        schemaName\n                    ]);\n                }\n                if (columnsResult && columnsResult.rows && columnsResult.rows.length > 0) {\n                    const columns = columnsResult.rows.map((col)=>({\n                            name: col.column_name,\n                            type: col.data_type,\n                            nullable: col.is_nullable === 'YES' || !col.is_not_null,\n                            primaryKey: false,\n                            foreignKey: undefined\n                        }));\n                    tables.push({\n                        tableName: `${schemaName}.${tableName}`,\n                        columns\n                    });\n                    console.log('PostgreSQL: Added table', tableName, 'with', columns.length, 'columns');\n                } else {\n                    console.log('PostgreSQL: No columns found for table', tableName);\n                }\n            }\n            console.log('PostgreSQL: Total tables processed:', tables.length);\n            await client.end();\n            if (tables.length === 0) {\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            console.error('PostgreSQL: Error in getPostgreSQLMetadata:', error);\n            await client.end();\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getMySQLMetadata() {\n        try {\n            const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_1__.createConnection({\n                host: this.config.host,\n                port: parseInt(this.config.port || '3306'),\n                database: this.config.database,\n                user: this.config.username,\n                password: this.config.password\n            });\n            // Get tables\n            const [tablesResult] = await connection.execute(`\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = ? \n        AND table_type = 'BASE TABLE'\n        ORDER BY table_name\n        LIMIT 50\n      `, [\n                this.config.database\n            ]);\n            if (!Array.isArray(tablesResult) || tablesResult.length === 0) {\n                await connection.end();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult){\n                const tableName = tableRow.TABLE_NAME;\n                // Get columns for this table\n                const [columnsResult] = await connection.execute(`\n          SELECT \n            column_name,\n            data_type,\n            is_nullable,\n            column_default,\n            ordinal_position\n          FROM information_schema.columns \n          WHERE table_schema = ? \n          AND table_name = ?\n          ORDER BY ordinal_position\n          LIMIT 100\n        `, [\n                    this.config.database,\n                    tableName\n                ]);\n                const columns = columnsResult.map((col)=>({\n                        name: col.COLUMN_NAME,\n                        type: col.DATA_TYPE,\n                        nullable: col.IS_NULLABLE === 'YES',\n                        primaryKey: false,\n                        foreignKey: undefined\n                    }));\n                tables.push({\n                    tableName,\n                    columns\n                });\n            }\n            await connection.end();\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getSQLiteMetadata() {\n        try {\n            const db = new (sqlite3__WEBPACK_IMPORTED_MODULE_2___default().Database)(this.config.filePath || '');\n            const query = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.all).bind(db);\n            // Get tables\n            const tablesResult = await query(\"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\");\n            if (!Array.isArray(tablesResult) || tablesResult.length === 0) {\n                db.close();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult){\n                const tableName = tableRow.name;\n                // Get columns for this table\n                const columnsResult = await query(`PRAGMA table_info(${tableName})`);\n                const columns = columnsResult.map((col)=>({\n                        name: col.name,\n                        type: col.type,\n                        nullable: col.notnull === 0,\n                        primaryKey: col.pk === 1,\n                        foreignKey: undefined\n                    }));\n                tables.push({\n                    tableName,\n                    columns\n                });\n            }\n            db.close();\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getSQLServerMetadata() {\n        // Placeholder for SQL Server metadata\n        return {\n            tables: [],\n            totalTables: 0,\n            connectionStatus: 'failed',\n            error: 'SQL Server metadata not yet implemented'\n        };\n    }\n    async getOracleMetadata() {\n        // Placeholder for Oracle metadata\n        return {\n            tables: [],\n            totalTables: 0,\n            connectionStatus: 'failed',\n            error: 'Oracle metadata not yet implemented'\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Ftest%2Froute&page=%2Fapi%2Fdatabase%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Ftest%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Ftest%2Froute&page=%2Fapi%2Fdatabase%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Ftest%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_test_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/database/test/route.ts */ \"(rsc)/./app/api/database/test/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_test_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_test_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/database/test/route\",\n        pathname: \"/api/database/test\",\n        filename: \"route\",\n        bundlePath: \"app/api/database/test/route\"\n    },\n    resolvedPagePath: \"/Users/akhil/Desktop/Projects/Text-SQL-Visualization/app/api/database/test/route.ts\",\n    nextConfigOutput,\n    userland: _Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_test_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkYXRhYmFzZSUyRnRlc3QlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRhdGFiYXNlJTJGdGVzdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRhdGFiYXNlJTJGdGVzdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFraGlsJTJGRGVza3RvcCUyRlByb2plY3RzJTJGVGV4dC1TUUwtVmlzdWFsaXphdGlvbiUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZha2hpbCUyRkRlc2t0b3AlMkZQcm9qZWN0cyUyRlRleHQtU1FMLVZpc3VhbGl6YXRpb24maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ21DO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRixxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYWtoaWwvRGVza3RvcC9Qcm9qZWN0cy9UZXh0LVNRTC1WaXN1YWxpemF0aW9uL2FwcC9hcGkvZGF0YWJhc2UvdGVzdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGF0YWJhc2UvdGVzdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RhdGFiYXNlL3Rlc3RcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2RhdGFiYXNlL3Rlc3Qvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYWtoaWwvRGVza3RvcC9Qcm9qZWN0cy9UZXh0LVNRTC1WaXN1YWxpemF0aW9uL2FwcC9hcGkvZGF0YWJhc2UvdGVzdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Ftest%2Froute&page=%2Fapi%2Fdatabase%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Ftest%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("sqlite3");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/iconv-lite","vendor-chunks/aws-ssl-profiles","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/lru-cache","vendor-chunks/long","vendor-chunks/safer-buffer","vendor-chunks/named-placeholders","vendor-chunks/lru.min","vendor-chunks/is-property","vendor-chunks/generate-function","vendor-chunks/denque"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Ftest%2Froute&page=%2Fapi%2Fdatabase%2Ftest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Ftest%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();