/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/database/execute/route";
exports.ids = ["app/api/database/execute/route"];
exports.modules = {

/***/ "(rsc)/./app/api/database/execute/route.ts":
/*!*******************************************!*\
  !*** ./app/api/database/execute/route.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./lib/database.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_database__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_database__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst dynamic = \"force-dynamic\";\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const { sqlQuery, databaseConfig } = body;\n        if (!sqlQuery) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"SQL query is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (!databaseConfig) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Database connection required for query execution\",\n                message: \"Please connect to a database first to execute SQL queries\"\n            }, {\n                status: 400\n            });\n        }\n        const dbConnection = new _lib_database__WEBPACK_IMPORTED_MODULE_1__.DatabaseConnection(databaseConfig);\n        // Test connection first\n        const connectionTest = await dbConnection.testConnection();\n        if (!connectionTest.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Database connection failed',\n                details: connectionTest.error\n            }, {\n                status: 400\n            });\n        }\n        // Execute the SQL query\n        const result = await dbConnection.executeQuery(sqlQuery);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: result.data,\n            rowCount: result.rowCount,\n            columns: result.columns,\n            executionTime: result.executionTime\n        });\n    } catch (error) {\n        console.error(\"SQL execution error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error occurred\",\n            message: \"Failed to execute SQL query\"\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2RhdGFiYXNlL2V4ZWN1dGUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwQztBQUN5QjtBQUU1RCxNQUFNRSxVQUFVLGdCQUFlO0FBRS9CLGVBQWVDLEtBQUtDLEdBQVk7SUFDckMsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsSUFBSUUsSUFBSTtRQUMzQixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFLEdBQUdIO1FBRXJDLElBQUksQ0FBQ0UsVUFBVTtZQUNiLE9BQU9QLHFEQUFZQSxDQUFDTSxJQUFJLENBQUM7Z0JBQUVHLE9BQU87WUFBd0IsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQzdFO1FBRUEsSUFBSSxDQUFDRixnQkFBZ0I7WUFDbkIsT0FBT1IscURBQVlBLENBQUNNLElBQUksQ0FBQztnQkFDdkJHLE9BQU87Z0JBQ1BFLFNBQVM7WUFDWCxHQUFHO2dCQUFFRCxRQUFRO1lBQUk7UUFDbkI7UUFFQSxNQUFNRSxlQUFlLElBQUlYLDZEQUFrQkEsQ0FBQ087UUFFNUMsd0JBQXdCO1FBQ3hCLE1BQU1LLGlCQUFpQixNQUFNRCxhQUFhRSxjQUFjO1FBQ3hELElBQUksQ0FBQ0QsZUFBZUUsT0FBTyxFQUFFO1lBQzNCLE9BQU9mLHFEQUFZQSxDQUFDTSxJQUFJLENBQUM7Z0JBQ3ZCUyxTQUFTO2dCQUNUTixPQUFPO2dCQUNQTyxTQUFTSCxlQUFlSixLQUFLO1lBQy9CLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNuQjtRQUVBLHdCQUF3QjtRQUN4QixNQUFNTyxTQUFTLE1BQU1MLGFBQWFNLFlBQVksQ0FBQ1g7UUFFL0MsT0FBT1AscURBQVlBLENBQUNNLElBQUksQ0FBQztZQUN2QlMsU0FBUztZQUNUSSxNQUFNRixPQUFPRSxJQUFJO1lBQ2pCQyxVQUFVSCxPQUFPRyxRQUFRO1lBQ3pCQyxTQUFTSixPQUFPSSxPQUFPO1lBQ3ZCQyxlQUFlTCxPQUFPSyxhQUFhO1FBQ3JDO0lBRUYsRUFBRSxPQUFPYixPQUFPO1FBQ2RjLFFBQVFkLEtBQUssQ0FBQyx3QkFBd0JBO1FBQ3RDLE9BQU9ULHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO1lBQ0VTLFNBQVM7WUFDVE4sT0FBT0EsaUJBQWlCZSxRQUFRZixNQUFNRSxPQUFPLEdBQUc7WUFDaERBLFNBQVM7UUFDWCxHQUNBO1lBQUVELFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvYWtoaWwvRGVza3RvcC9Qcm9qZWN0cy9UZXh0LVNRTC1WaXN1YWxpemF0aW9uL2FwcC9hcGkvZGF0YWJhc2UvZXhlY3V0ZS9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIlxuaW1wb3J0IHsgRGF0YWJhc2VDb25uZWN0aW9uLCBEYXRhYmFzZUNvbmZpZyB9IGZyb20gXCJAL2xpYi9kYXRhYmFzZVwiXG5cbmV4cG9ydCBjb25zdCBkeW5hbWljID0gXCJmb3JjZS1keW5hbWljXCJcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxOiBSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKClcbiAgICBjb25zdCB7IHNxbFF1ZXJ5LCBkYXRhYmFzZUNvbmZpZyB9ID0gYm9keVxuXG4gICAgaWYgKCFzcWxRdWVyeSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6IFwiU1FMIHF1ZXJ5IGlzIHJlcXVpcmVkXCIgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cblxuICAgIGlmICghZGF0YWJhc2VDb25maWcpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgICBlcnJvcjogXCJEYXRhYmFzZSBjb25uZWN0aW9uIHJlcXVpcmVkIGZvciBxdWVyeSBleGVjdXRpb25cIixcbiAgICAgICAgbWVzc2FnZTogXCJQbGVhc2UgY29ubmVjdCB0byBhIGRhdGFiYXNlIGZpcnN0IHRvIGV4ZWN1dGUgU1FMIHF1ZXJpZXNcIlxuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cblxuICAgIGNvbnN0IGRiQ29ubmVjdGlvbiA9IG5ldyBEYXRhYmFzZUNvbm5lY3Rpb24oZGF0YWJhc2VDb25maWcpXG5cbiAgICAvLyBUZXN0IGNvbm5lY3Rpb24gZmlyc3RcbiAgICBjb25zdCBjb25uZWN0aW9uVGVzdCA9IGF3YWl0IGRiQ29ubmVjdGlvbi50ZXN0Q29ubmVjdGlvbigpXG4gICAgaWYgKCFjb25uZWN0aW9uVGVzdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZCcsXG4gICAgICAgIGRldGFpbHM6IGNvbm5lY3Rpb25UZXN0LmVycm9yXG4gICAgICB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgU1FMIHF1ZXJ5XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJDb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShzcWxRdWVyeSlcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICByb3dDb3VudDogcmVzdWx0LnJvd0NvdW50LFxuICAgICAgY29sdW1uczogcmVzdWx0LmNvbHVtbnMsXG4gICAgICBleGVjdXRpb25UaW1lOiByZXN1bHQuZXhlY3V0aW9uVGltZVxuICAgIH0pXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiU1FMIGV4ZWN1dGlvbiBlcnJvcjpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJVbmtub3duIGVycm9yIG9jY3VycmVkXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGV4ZWN1dGUgU1FMIHF1ZXJ5XCJcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJEYXRhYmFzZUNvbm5lY3Rpb24iLCJkeW5hbWljIiwiUE9TVCIsInJlcSIsImJvZHkiLCJqc29uIiwic3FsUXVlcnkiLCJkYXRhYmFzZUNvbmZpZyIsImVycm9yIiwic3RhdHVzIiwibWVzc2FnZSIsImRiQ29ubmVjdGlvbiIsImNvbm5lY3Rpb25UZXN0IiwidGVzdENvbm5lY3Rpb24iLCJzdWNjZXNzIiwiZGV0YWlscyIsInJlc3VsdCIsImV4ZWN1dGVRdWVyeSIsImRhdGEiLCJyb3dDb3VudCIsImNvbHVtbnMiLCJleGVjdXRpb25UaW1lIiwiY29uc29sZSIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/database/execute/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseConnection: () => (/* binding */ DatabaseConnection)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nclass DatabaseConnection {\n    constructor(config){\n        this.config = config;\n    }\n    async testConnection() {\n        try {\n            switch(this.config.type){\n                case 'postgresql':\n                    return await this.testPostgreSQL();\n                case 'mysql':\n                    return await this.testMySQL();\n                case 'sqlite':\n                    return await this.testSQLite();\n                case 'sqlserver':\n                    return await this.testSQLServer();\n                case 'oracle':\n                    return await this.testOracle();\n                default:\n                    return {\n                        success: false,\n                        error: 'Unsupported database type'\n                    };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async getMetadata() {\n        try {\n            switch(this.config.type){\n                case 'postgresql':\n                    return await this.getPostgreSQLMetadata();\n                case 'mysql':\n                    return await this.getMySQLMetadata();\n                case 'sqlite':\n                    return await this.getSQLiteMetadata();\n                case 'sqlserver':\n                    return await this.getSQLServerMetadata();\n                case 'oracle':\n                    return await this.getOracleMetadata();\n                default:\n                    return {\n                        tables: [],\n                        totalTables: 0,\n                        connectionStatus: 'failed',\n                        error: 'Unsupported database type'\n                    };\n            }\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async testPostgreSQL() {\n        const client = new pg__WEBPACK_IMPORTED_MODULE_0__.Client({\n            host: this.config.host,\n            port: parseInt(this.config.port || '5432'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password\n        });\n        try {\n            await client.connect();\n            await client.query('SELECT 1');\n            await client.end();\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testMySQL() {\n        try {\n            const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_1__.createConnection({\n                host: this.config.host,\n                port: parseInt(this.config.port || '3306'),\n                database: this.config.database,\n                user: this.config.username,\n                password: this.config.password,\n                connectTimeout: 10000\n            });\n            await connection.query('SELECT 1');\n            await connection.end();\n            return {\n                success: true\n            };\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Connection failed';\n            // Provide more specific error messages for common MySQL issues\n            if (errorMessage.includes('ECONNREFUSED')) {\n                return {\n                    success: false,\n                    error: 'Connection refused. Check if MySQL server is running and port is correct.'\n                };\n            } else if (errorMessage.includes('ER_ACCESS_DENIED_ERROR')) {\n                return {\n                    success: false,\n                    error: 'Access denied. Check username and password.'\n                };\n            } else if (errorMessage.includes('ER_BAD_DB_ERROR')) {\n                return {\n                    success: false,\n                    error: 'Database does not exist or access denied.'\n                };\n            }\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    async testSQLite() {\n        try {\n            if (!this.config.filePath) {\n                return {\n                    success: false,\n                    error: 'SQLite file path is required'\n                };\n            }\n            const db = new (sqlite3__WEBPACK_IMPORTED_MODULE_2___default().Database)(this.config.filePath);\n            const query = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.get).bind(db);\n            await query('SELECT 1');\n            db.close();\n            return {\n                success: true\n            };\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Connection failed';\n            // Provide more specific error messages for common SQLite issues\n            if (errorMessage.includes('ENOENT')) {\n                return {\n                    success: false,\n                    error: 'File not found. Check if the SQLite database file path is correct.'\n                };\n            } else if (errorMessage.includes('EACCES')) {\n                return {\n                    success: false,\n                    error: 'Permission denied. Check file permissions.'\n                };\n            } else if (errorMessage.includes('SQLITE_CANTOPEN')) {\n                return {\n                    success: false,\n                    error: 'Cannot open database. Check file path and permissions.'\n                };\n            }\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    async testSQLServer() {\n        // For SQL Server, we'll use a simple connection test\n        // In production, you'd want to use mssql package\n        try {\n            // This is a placeholder - you'll need to implement actual SQL Server connection\n            // For now, return a more helpful error message\n            return {\n                success: false,\n                error: 'SQL Server connection requires mssql package. Please install: npm install mssql @types/mssql'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async testOracle() {\n        // For Oracle, we'll use a simple connection test\n        // In production, you'd want to implement actual Oracle connection\n        try {\n            // This is a placeholder - you'll need to implement actual Oracle connection\n            // For now, return a more helpful error message\n            return {\n                success: false,\n                error: 'Oracle connection requires oracledb package. Please install: npm install oracledb'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Connection failed'\n            };\n        }\n    }\n    async getPostgreSQLMetadata() {\n        console.log('PostgreSQL: Connecting with config:', {\n            host: this.config.host,\n            port: this.config.port || '5432',\n            database: this.config.database,\n            user: this.config.username\n        });\n        const client = new pg__WEBPACK_IMPORTED_MODULE_0__.Client({\n            host: this.config.host,\n            port: parseInt(this.config.port || '5432'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password\n        });\n        try {\n            await client.connect();\n            console.log('PostgreSQL: Connected successfully, fetching metadata...');\n            // Debug: Check what database and user we're actually connected to\n            try {\n                const contextResult = await client.query(`\n          SELECT current_user, current_database(), current_schema()\n        `);\n                console.log('PostgreSQL: Connection context:', contextResult.rows[0]);\n            } catch (contextError) {\n                console.log('PostgreSQL: Could not get connection context:', contextError);\n            }\n            // Try multiple approaches to find tables\n            let tablesResult;\n            // Approach 1: Try pg_tables with more debugging\n            try {\n                console.log('PostgreSQL: Trying pg_tables query...');\n                const pgTablesTest = await client.query(`\n          SELECT schemaname, tablename \n          FROM pg_tables \n          ORDER BY schemaname, tablename\n        `);\n                console.log('PostgreSQL: pg_tables raw result:', pgTablesTest.rows);\n                // Look for user tables in ANY schema (not just public)\n                tablesResult = await client.query(`\n          SELECT schemaname, tablename \n          FROM pg_tables \n          WHERE schemaname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n          ORDER BY schemaname, tablename\n        `);\n                console.log('PostgreSQL: Found', tablesResult.rows.length, 'user tables via pg_tables (all schemas)');\n                // If still no tables, try to find what schemas exist\n                if (tablesResult.rows.length === 0) {\n                    const schemasResult = await client.query(`\n            SELECT nspname as schema_name\n            FROM pg_namespace\n            WHERE nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n            ORDER BY nspname\n          `);\n                    console.log('PostgreSQL: Available schemas:', schemasResult.rows);\n                    // Try to find your specific tables directly\n                    const specificTablesResult = await client.query(`\n            SELECT schemaname, tablename \n            FROM pg_tables \n            WHERE tablename IN ('sales_data', 'user_prompts')\n            ORDER BY schemaname, tablename\n          `);\n                    console.log('PostgreSQL: Looking for specific tables (sales_data, user_prompts):', specificTablesResult.rows);\n                    // Try a direct query to see if we can access the tables\n                    try {\n                        const directQueryResult = await client.query(`\n              SELECT COUNT(*) as table_count FROM pg_tables \n              WHERE schemaname = 'public' \n              AND tablename IN ('sales_data', 'user_prompts')\n            `);\n                        console.log('PostgreSQL: Direct table count query result:', directQueryResult.rows[0]);\n                    } catch (directError) {\n                        console.log('PostgreSQL: Direct query failed:', directError);\n                    }\n                }\n            } catch (pgError) {\n                console.log('PostgreSQL: pg_tables failed:', pgError);\n            }\n            // Approach 2: If pg_tables didn't work or found 0 tables, try information_schema\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying information_schema query...');\n                    tablesResult = await client.query(`\n            SELECT table_schema, table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_type = 'BASE TABLE'\n            ORDER BY table_name\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables via information_schema');\n                } catch (infoError) {\n                    console.log('PostgreSQL: information_schema failed:', infoError);\n                }\n            }\n            // Approach 3: Try a direct catalog query\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying direct catalog query...');\n                    tablesResult = await client.query(`\n            SELECT n.nspname as schema_name, c.relname as table_name\n            FROM pg_class c\n            JOIN pg_namespace n ON c.relnamespace = n.oid\n            WHERE c.relkind = 'r'\n            AND n.nspname = 'public'\n            ORDER BY c.relname\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables via direct catalog query');\n                } catch (catError) {\n                    console.log('PostgreSQL: Direct catalog query failed:', catError);\n                }\n            }\n            // Approach 4: Try to find ANY tables in ANY schema\n            if (!tablesResult || tablesResult.rows.length === 0) {\n                try {\n                    console.log('PostgreSQL: Trying to find tables in ANY schema...');\n                    tablesResult = await client.query(`\n            SELECT n.nspname as schema_name, c.relname as table_name\n            FROM pg_class c\n            JOIN pg_namespace n ON c.relnamespace = n.oid\n            WHERE c.relkind = 'r'\n            AND n.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')\n            ORDER BY n.nspname, c.relname\n          `);\n                    console.log('PostgreSQL: Found', tablesResult.rows.length, 'tables in ANY schema');\n                } catch (anyError) {\n                    console.log('PostgreSQL: ANY schema query failed:', anyError);\n                }\n            }\n            if (!tablesResult || !tablesResult.rows || tablesResult.rows.length === 0) {\n                console.log('PostgreSQL: No tables found in any schema');\n                await client.end();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult.rows){\n                const tableName = tableRow.tablename || tableRow.table_name;\n                const schemaName = tableRow.schemaname || tableRow.table_schema || 'public';\n                console.log('PostgreSQL: Processing table:', tableName, 'in schema:', schemaName);\n                // Get columns for this table\n                let columnsResult;\n                try {\n                    columnsResult = await client.query(`\n            SELECT \n              column_name,\n              data_type,\n              is_nullable,\n              column_default,\n              ordinal_position\n            FROM information_schema.columns \n            WHERE table_schema = $1 \n            AND table_name = $2\n            ORDER BY ordinal_position\n          `, [\n                        schemaName,\n                        tableName\n                    ]);\n                } catch (colError) {\n                    console.log('PostgreSQL: information_schema.columns failed for', tableName, 'trying pg_attribute...');\n                    // Fallback to pg_attribute\n                    columnsResult = await client.query(`\n            SELECT \n              attname as column_name,\n              format_type(atttypid, atttypmod) as data_type,\n              attnotnull as is_not_null,\n              attnum as ordinal_position\n            FROM pg_attribute \n            WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = $1 AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2))\n            AND attnum > 0 \n            AND NOT attisdropped\n            ORDER BY attnum\n          `, [\n                        tableName,\n                        schemaName\n                    ]);\n                }\n                if (columnsResult && columnsResult.rows && columnsResult.rows.length > 0) {\n                    const columns = columnsResult.rows.map((col)=>({\n                            name: col.column_name,\n                            type: col.data_type,\n                            nullable: col.is_nullable === 'YES' || !col.is_not_null,\n                            primaryKey: false,\n                            foreignKey: undefined\n                        }));\n                    tables.push({\n                        tableName: `${schemaName}.${tableName}`,\n                        columns\n                    });\n                    console.log('PostgreSQL: Added table', tableName, 'with', columns.length, 'columns');\n                } else {\n                    console.log('PostgreSQL: No columns found for table', tableName);\n                }\n            }\n            console.log('PostgreSQL: Total tables processed:', tables.length);\n            await client.end();\n            if (tables.length === 0) {\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            console.error('PostgreSQL: Error in getPostgreSQLMetadata:', error);\n            await client.end();\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getMySQLMetadata() {\n        try {\n            const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_1__.createConnection({\n                host: this.config.host,\n                port: parseInt(this.config.port || '3306'),\n                database: this.config.database,\n                user: this.config.username,\n                password: this.config.password\n            });\n            // Get tables\n            const [tablesResult] = await connection.execute(`\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = ? \n        AND table_type = 'BASE TABLE'\n        ORDER BY table_name\n        LIMIT 50\n      `, [\n                this.config.database\n            ]);\n            if (!Array.isArray(tablesResult) || tablesResult.length === 0) {\n                await connection.end();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult){\n                const tableName = tableRow.TABLE_NAME;\n                // Get columns for this table\n                const [columnsResult] = await connection.execute(`\n          SELECT \n            column_name,\n            data_type,\n            is_nullable,\n            column_default,\n            ordinal_position\n          FROM information_schema.columns \n          WHERE table_schema = ? \n          AND table_name = ?\n          ORDER BY ordinal_position\n          LIMIT 100\n        `, [\n                    this.config.database,\n                    tableName\n                ]);\n                const columns = columnsResult.map((col)=>({\n                        name: col.COLUMN_NAME,\n                        type: col.DATA_TYPE,\n                        nullable: col.IS_NULLABLE === 'YES',\n                        primaryKey: false,\n                        foreignKey: undefined\n                    }));\n                tables.push({\n                    tableName,\n                    columns\n                });\n            }\n            await connection.end();\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getSQLiteMetadata() {\n        try {\n            const db = new (sqlite3__WEBPACK_IMPORTED_MODULE_2___default().Database)(this.config.filePath || '');\n            const query = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.all).bind(db);\n            // Get tables\n            const tablesResult = await query(\"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\");\n            if (!Array.isArray(tablesResult) || tablesResult.length === 0) {\n                db.close();\n                return {\n                    tables: [],\n                    totalTables: 0,\n                    connectionStatus: 'no_tables'\n                };\n            }\n            const tables = [];\n            for (const tableRow of tablesResult){\n                const tableName = tableRow.name;\n                // Get columns for this table\n                const columnsResult = await query(`PRAGMA table_info(${tableName})`);\n                const columns = columnsResult.map((col)=>({\n                        name: col.name,\n                        type: col.type,\n                        nullable: col.notnull === 0,\n                        primaryKey: col.pk === 1,\n                        foreignKey: undefined\n                    }));\n                tables.push({\n                    tableName,\n                    columns\n                });\n            }\n            db.close();\n            return {\n                tables,\n                totalTables: tables.length,\n                connectionStatus: 'connected'\n            };\n        } catch (error) {\n            return {\n                tables: [],\n                totalTables: 0,\n                connectionStatus: 'failed',\n                error: error instanceof Error ? error.message : 'Failed to fetch metadata'\n            };\n        }\n    }\n    async getSQLServerMetadata() {\n        // Placeholder for SQL Server metadata\n        return {\n            tables: [],\n            totalTables: 0,\n            connectionStatus: 'failed',\n            error: 'SQL Server metadata not yet implemented'\n        };\n    }\n    async getOracleMetadata() {\n        // Placeholder for Oracle metadata\n        return {\n            tables: [],\n            totalTables: 0,\n            connectionStatus: 'failed',\n            error: 'Oracle metadata not yet implemented'\n        };\n    }\n    async executeQuery(sqlQuery) {\n        const startTime = Date.now();\n        switch(this.config.type){\n            case 'postgresql':\n                return this.executePostgreSQLQuery(sqlQuery, startTime);\n            case 'mysql':\n                return this.executeMySQLQuery(sqlQuery, startTime);\n            case 'sqlite':\n                return this.executeSQLiteQuery(sqlQuery, startTime);\n            case 'sqlserver':\n                throw new Error('SQL Server query execution not yet implemented');\n            case 'oracle':\n                throw new Error('Oracle query execution not yet implemented');\n            default:\n                throw new Error(`Unsupported database type: ${this.config.type}`);\n        }\n    }\n    async executePostgreSQLQuery(sqlQuery, startTime) {\n        const client = new pg__WEBPACK_IMPORTED_MODULE_0__.Client({\n            host: this.config.host,\n            port: parseInt(this.config.port || '5432'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password\n        });\n        try {\n            await client.connect();\n            const result = await client.query(sqlQuery);\n            const executionTime = Date.now() - startTime;\n            await client.end();\n            return {\n                data: result.rows || [],\n                rowCount: result.rowCount || 0,\n                columns: result.fields?.map((f)=>f.name) || [],\n                executionTime\n            };\n        } catch (error) {\n            await client.end();\n            throw error;\n        }\n    }\n    async executeMySQLQuery(sqlQuery, startTime) {\n        const connection = await mysql2_promise__WEBPACK_IMPORTED_MODULE_1__.createConnection({\n            host: this.config.host,\n            port: parseInt(this.config.port || '3306'),\n            database: this.config.database,\n            user: this.config.username,\n            password: this.config.password,\n            connectTimeout: 10000\n        });\n        try {\n            const [rows] = await connection.execute(sqlQuery);\n            const executionTime = Date.now() - startTime;\n            await connection.end();\n            // MySQL returns rows as array and field info separately\n            const data = Array.isArray(rows) ? rows : [];\n            const columns = Object.keys(data[0] || {});\n            return {\n                data,\n                rowCount: data.length,\n                columns,\n                executionTime\n            };\n        } catch (error) {\n            await connection.end();\n            throw error;\n        }\n    }\n    async executeSQLiteQuery(sqlQuery, startTime) {\n        if (!this.config.filePath) {\n            throw new Error('SQLite file path is required');\n        }\n        const db = new (sqlite3__WEBPACK_IMPORTED_MODULE_2___default().Database)(this.config.filePath);\n        const query = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.all).bind(db);\n        const getColumns = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(db.all).bind(db);\n        try {\n            // Get column names first\n            const columnResult = await getColumns(`PRAGMA table_info((${sqlQuery.split('FROM')[1]?.split(' ')[1] || 'unknown'}))`);\n            const columns = columnResult.map((col)=>col.name);\n            // Execute the query\n            const data = await query(sqlQuery);\n            const executionTime = Date.now() - startTime;\n            db.close();\n            return {\n                data: data || [],\n                rowCount: data?.length || 0,\n                columns,\n                executionTime\n            };\n        } catch (error) {\n            db.close();\n            throw error;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Fexecute%2Froute&page=%2Fapi%2Fdatabase%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Fexecute%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Fexecute%2Froute&page=%2Fapi%2Fdatabase%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Fexecute%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/database/execute/route.ts */ \"(rsc)/./app/api/database/execute/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/database/execute/route\",\n        pathname: \"/api/database/execute\",\n        filename: \"route\",\n        bundlePath: \"app/api/database/execute/route\"\n    },\n    resolvedPagePath: \"/Users/akhil/Desktop/Projects/Text-SQL-Visualization/app/api/database/execute/route.ts\",\n    nextConfigOutput,\n    userland: _Users_akhil_Desktop_Projects_Text_SQL_Visualization_app_api_database_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkYXRhYmFzZSUyRmV4ZWN1dGUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRhdGFiYXNlJTJGZXhlY3V0ZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRhdGFiYXNlJTJGZXhlY3V0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFraGlsJTJGRGVza3RvcCUyRlByb2plY3RzJTJGVGV4dC1TUUwtVmlzdWFsaXphdGlvbiUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZha2hpbCUyRkRlc2t0b3AlMkZQcm9qZWN0cyUyRlRleHQtU1FMLVZpc3VhbGl6YXRpb24maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ3NDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRixxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYWtoaWwvRGVza3RvcC9Qcm9qZWN0cy9UZXh0LVNRTC1WaXN1YWxpemF0aW9uL2FwcC9hcGkvZGF0YWJhc2UvZXhlY3V0ZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGF0YWJhc2UvZXhlY3V0ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2RhdGFiYXNlL2V4ZWN1dGVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2RhdGFiYXNlL2V4ZWN1dGUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYWtoaWwvRGVza3RvcC9Qcm9qZWN0cy9UZXh0LVNRTC1WaXN1YWxpemF0aW9uL2FwcC9hcGkvZGF0YWJhc2UvZXhlY3V0ZS9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Fexecute%2Froute&page=%2Fapi%2Fdatabase%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Fexecute%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("sqlite3");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/iconv-lite","vendor-chunks/aws-ssl-profiles","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/lru-cache","vendor-chunks/long","vendor-chunks/safer-buffer","vendor-chunks/named-placeholders","vendor-chunks/lru.min","vendor-chunks/is-property","vendor-chunks/generate-function","vendor-chunks/denque"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdatabase%2Fexecute%2Froute&page=%2Fapi%2Fdatabase%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdatabase%2Fexecute%2Froute.ts&appDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fakhil%2FDesktop%2FProjects%2FText-SQL-Visualization&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();